#ifndef _CREATEOBJECT_H_
#define _CREATEOBJECT_H_ 1

#include "TEvent.h"
#include "Timeline.h"
#include "TObject.h"

class CreateObject : public TEvent{

    public:

        CreateObject();
        CreateObject(std::unique_ptr<TObject> new_object, std::unique_ptr<TEvent> on_created);

        CreateObject(std::unique_ptr<TObject> new_object, std::unique_ptr<TEvent> on_created,const std::string& trigger);

        CreateObject(std::unique_ptr<TObject> new_object,const std::string& trigger);

        ~CreateObject() override;

        // Serialize this event's data, so it can be efficiently moved between timelines
        std::map<std::string,Variant> serialize() const override;

        // Set this event to data generated by its serialize method
        void set(std::map<std::string,Variant>& serialized) override;

        // Runs the event
        // This is what you need to override to implement your application
        // To maintain causality run should only interact with dynamic data by using the privided methods:
        // get(id), getMutable(), addEvent, createObject, deleteObject, and getCollisions
        void run() override;

    private:
        std::unique_ptr<TObject> new_object;
        std::unique_ptr<TEvent> on_created;
        std::string id_trigger; // external notification to send generated ID to

        
};
#endif // #ifndef _CREATEOBJECT_H_