#ifndef _CHANGE_VELOCITY_H_
#define _CHANGE_VELOCITY_H_ 1

#include "TEvent.h"
#include "TObject.h"
#include "Variant.h"

#include <string>
#include <map>


class ChangeVelocity : TEvent{

    public:
        glm::vec3 new_velocity;

        ChangeVelocity(int moving_object, glm::vec3 v);

        // Serialize this event's data, so it can be efficiently moved between timelines
        std::map<std::string,Variant> serialize() override;

        // Set this event to data generated by its serialize method
        void set(std::map<std::string,Variant>& serialized) override;

        // Runs the event
        // This is what you need to override to implement your application
        // To maintain causality run should only interact with dynamic data by using the privided methods:
        // get(id), getMutable(), addEvent, createObject, deleteObject, and getCollisions
        void run() override;

    private:
        TObject new_object;
        TEvent on_created;

        
};
#endif // #ifndef _CHANGE_VELOCITY_H_