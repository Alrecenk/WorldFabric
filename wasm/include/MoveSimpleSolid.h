#ifndef _MOVE_SIMPLE_SOLID_H_
#define _MOVE_SIMPLE_SOLID_H_ 1

#include "TEvent.h"
#include "TObject.h"
#include "Variant.h"

#include <string>
#include <map>


class MoveSimpleSolid : public TEvent{

    public:

        static float friction ; // amount of velocity lost per second
        static float angular_friction ; // amount of angular velocity lost per second
        static float max_speed ; // max speed
        static float max_angular_speed ; // max rotational speed

        double interval ;

        MoveSimpleSolid();

        MoveSimpleSolid(int moving_object, double time_step);

        MoveSimpleSolid(double time_step);

        ~MoveSimpleSolid() override;

        // Serialize this event's data, so it can be efficiently moved between timelines
        std::map<std::string,Variant> serialize() const override;

        // Set this event to data generated by its serialize method
        void set(std::map<std::string,Variant>& serialized) override;

        // Runs the event
        // This is what you need to override to implement your application
        // To maintain causality run should only interact with dynamic data by using the privided methods:
        // get(id), getMutable(), addEvent, createObject, deleteObject, and getCollisions
        void run() override;
        
};
#endif // #ifndef _MOVE_SIMPLE_SOLID_H_