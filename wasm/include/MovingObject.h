#ifndef _MOVING_OBJECT_H_
#define _MOVING_OBJECT_H_ 1

#include "TObject.h"

class MovingObject : public TObject{

    public:
        glm::vec3 velocity;

        MovingObject();

        MovingObject(glm::vec3 p, glm::vec3 v, float r);

        ~MovingObject() override;

        // Serialize this object, so it can be efficiently moved between timelines
        std::map<std::string,Variant> serialize() const override;

        // Set this object to data generated by its serialize method
        void set(std::map<std::string,Variant>& serialized) override;

        // Override this to provide an efficient deep copy of this object
        // If not overridden serialize and set will be used to copy your object (which will be inefficent)
        std::unique_ptr<TObject> deepCopy() override;

        // Override this function to provide logic for interpolation after rollback or extrapolation for slowly updating objects
        // If not overridden getObserved returns the raw value of the object
        std::unique_ptr<TObject> getObserved(const TObject* last_observed) override;

        
  
};
#endif // #ifndef _MOVING_OBJECT_H_