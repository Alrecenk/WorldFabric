#include "MovingObject.h"

using std::map;
using std::string;
using std::vector;

MovingObject::MovingObject(){}

MovingObject::MovingObject(glm::vec3 p, glm::vec3 v, float r){
    position = p ;
    velocity = v;
    radius = r ;
}

MovingObject::~MovingObject() {}

// Serialize this object, so it can be efficiently moved between timelines
std::map<std::string,Variant> MovingObject::serialize() const{
    map<string,Variant> serial;
    serial["p"] = Variant(position);
    serial["v"] = Variant(velocity);
    serial["r"] = Variant(radius);
    return serial;
}

// Set this object to data generated by its serialize method
void MovingObject::set(std::map<std::string,Variant>& serial){
    position = serial["p"].getVec3();
    velocity = serial["v"].getVec3();
    radius = serial["r"].getFloat();
}

// Override this to provide an efficient deep copy of this object
// If not overridden serialize and set will be used to copy your object (which will be inefficent)
std::unique_ptr<TObject> MovingObject::deepCopy(){
    return std::make_unique<MovingObject>(position, velocity, radius);
}

// Override this function to provide logic for interpolation after rollback or extrapolation for slowly updating objects
// If not overridden getObserved returns the raw value of the object
std::unique_ptr<TObject> MovingObject::getObserved(const TObject* last_observed){
    return deepCopy();
}