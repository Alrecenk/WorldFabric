#include "CreateObject.h"

using std::map ;
using std::string ;

CreateObject::CreateObject(){

}

CreateObject::CreateObject(TObject no, TEvent oc){
    new_object = no;
    on_created = oc ;
}

// Serialize this event's data, so it can be efficiently moved between timelines
std::map<std::string,Variant> CreateObject::serialize(){
    map<string,Variant> serial;
    serial["o"] = Variant(new_object.serialize());
    serial["e"] = Variant(on_created.serialize());
    serial["t"] = Variant(time);
    serial["a"] = Variant(anchor_id);
    return serial;
}

// Set this event to data generated by its serialize method
void CreateObject::set(std::map<std::string,Variant>& serial){
    auto o = serial["o"].getObject()
    new_object.set(o);
    auto e = serial["e"].getObject() ;
    on_created.set(e);
    time = serial["t"].getDouble();
    anchor_id = serial["a"].getInt();
}

// Runs the event
// This is what you need to override to implement your application
// To maintain causality run should only interact with dynamic data by using the privided methods:
// get(id), getMutable(), addEvent, createObject, deleteObject, and getCollisions
void CreateObject::run(){
    int id = timeline->getNextID();
    double make_time = time ;
    const TObject* anchor = get(anchor_id) ;
    if(anchor != nullptr){ // anchor may be null when a timeline is creating its vantage object
        make_time += glm::length(new_object.position - anchor->position)/timeline->info_speed ;
    }
    timeline->objects[id] = ObjectHistory(new_object, make_time);
    wrote_anchor = true ;
    on_created.anchor_id = id ;
    on_created.time = make_time ; 
    addEvent(on_created);
}