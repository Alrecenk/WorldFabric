#include "CreateObject.h"

using std::map ;
using std::string ;

CreateObject::CreateObject(){

}

CreateObject::CreateObject(std::unique_ptr<TObject> no, std::unique_ptr<TEvent> oc){
    new_object = std::move(no);
    on_created = std::move(oc) ;
}

CreateObject::~CreateObject() {}


// Serialize this event's data, so it can be efficiently moved between timelines
std::map<std::string,Variant> CreateObject::serialize() const{
    map<string,Variant> serial;
    serial["o"] = Variant(new_object->serialize());
    serial["e"] = Variant(on_created->serialize());
    serial["t"] = Variant(time);
    serial["a"] = Variant(anchor_id);
    return serial;
}

// Set this event to data generated by its serialize method
void CreateObject::set(std::map<std::string,Variant>& serial){
    map<string,Variant> o = serial["o"].getObject() ;
    new_object->set(o);
    map<string,Variant> e = serial["e"].getObject() ;
    on_created->set(e);
    time = serial["t"].getDouble();
    anchor_id = serial["a"].getInt();
}

// Runs the event
// This is what you need to override to implement your application
// To maintain causality run should only interact with dynamic data by using the privided methods:
// get(id), getMutable(), addEvent, createObject, deleteObject, and getCollisions
void CreateObject::run(){
    printf("create object running...\n");
    int id = timeline->getNextID();

    double make_time = time ;
    printf("getting anchor...\n");
    const TObject* anchor = get(anchor_id) ;
    if(anchor != nullptr){ // anchor may be null when a timeline is creating its vantage object
        make_time += glm::length(new_object->position - anchor->position)/timeline->info_speed ;
    }
    printf("making object history...\n");
    timeline->objects[id] = ObjectHistory(std::move(new_object), make_time);

    timeline->objects[id].timeline = timeline;
    if(on_created.get() !=nullptr){
        on_created->anchor_id = id ;
        on_created->time = make_time ; 
        on_created->wrote_anchor = true ; // TODO create object rollback probably needs custom code
        addEvent(std::move(on_created));
    }
    printf("create object completed...\n");
}