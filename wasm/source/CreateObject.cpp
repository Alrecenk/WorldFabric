#include "CreateObject.h"

using std::map ;
using std::string ;

// Serialize this event's data, so it can be efficiently moved between timelines
std::map<std::string,Variant> CreateObject::serialize(){
    map<string,Variant> serial;
    serial["o"] = new_object.serialize();
    serial["e"] = on_created.serialize();
    serial["t"] = Variant(time);
    serial["a"] = Variant(anchor_id);
    return serial;
}

// Set this event to data generated by its serialize method
void CreateObject::set(std::map<std::string,Variant>& serial){
    new_object.set(serial["o"]);
    on_created.set(serial["e"]);
    time = serial["t"].getDouble();
    anchor_id = serial["a"].getInt();
}

// Runs the event
// This is what you need to override to implement your application
// To maintain causality run should only interact with dynamic data by using the privided methods:
// get(id), getMutable(), addEvent, createObject, deleteObject, and getCollisions
CreateObject::run(){
    int id = timeline->getNextID();
    double make_time = time + gl::length(new_object-get(anchor_id).position)/timeline->max_info_speed
    timeline->objects[id] = ObjectHistory(new_object, make_time);
    wrote_anchor = true ;
    on_created.anchor_id = id ;
    on_created.time = make_time ; 
    createEvent(on_created);
}