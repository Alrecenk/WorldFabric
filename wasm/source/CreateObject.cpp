#include "CreateObject.h"

using std::map ;
using std::string ;
using std::weak_ptr;
using std::shared_ptr;
using std::unique_ptr;

CreateObject::CreateObject(){
    type = 1 ;
}

CreateObject::CreateObject(std::unique_ptr<TObject> no, std::unique_ptr<TEvent> oc){
    new_object = std::move(no);
    on_created = std::move(oc) ;
    type = 1 ;
}

CreateObject::~CreateObject() {}


// Serialize this event's data, so it can be efficiently moved between timelines
std::map<std::string,Variant> CreateObject::serialize() const{
    //printf("serializing create object\n");
    map<string,Variant> serial;
    if(new_object.get() == nullptr){
        printf("WTF:Create object with no new object to create!\n");
    }
    serial["o"] = Variant(new_object->serialize());
    if(on_created.get() != nullptr){
        serial["e"] = Variant(on_created->serialize());
    }
    serial["t"] = Variant(time);
    serial["a"] = Variant(anchor_id);
    return serial;
}

// Set this event to data generated by its serialize method
void CreateObject::set(std::map<std::string,Variant>& serial){
    //map<string,Variant> o = serial["o"].getObject() ;
    //new_object->set(o);

    new_object = TObject::generateTypedTObject(serial["o"]);

    //map<string,Variant> e = serial["e"].getObject() ;
    //on_created->set(e);
    if(serial.find("e") != serial.end()){
        on_created = TEvent::generateTypedTEvent(serial["e"]);
    }

    time = serial["t"].getDouble();
    anchor_id = serial["a"].getInt();
}

// Runs the event
// This is what you need to override to implement your application
// To maintain causality run should only interact with dynamic data by using the privided methods:
// get(id), getMutable(), addEvent, createObject, deleteObject, and getCollisions
void CreateObject::run(){
    
    int id = timeline->getNextID();

    double make_time = time ;
    //printf("getting anchor %d...\n", id);
    weak_ptr<TObject> anchor = get(anchor_id) ;
    if(auto a = anchor.lock()){ // anchor may be null when a timeline is creating its vantage object
        //printf("Got an anchor!\n");
        make_time += fmin(timeline->max_time_warp, glm::length(new_object->position - a->position)/timeline->info_speed) ;
    }
    //printf("Object being created at time %f\n", make_time);
    //printf("making new object...\n");

    timeline->objects[id] = new_object->deepCopy() ;
    timeline->objects[id]->timeline = timeline;
    timeline->objects[id]->write_time = make_time ;

    if(on_created.get() != nullptr){
        std::unique_ptr<TEvent> new_event = on_created->deepCopy();
        new_event->anchor_id = id ;
        new_event->time = fmax(new_event->time, make_time) ; 
         // TODO create object rollback might need custom code
        addEvent(std::move(new_event));
        //printf("on created event added!\n");
    }
    
    //printf("create object completed:\n");
    //timeline->objects[id]->print();
}