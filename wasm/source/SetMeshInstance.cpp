#include "SetMeshInstance.h"
#include "MeshInstance.h"

using std::string ;
using std::map ;
using std::weak_ptr;
using std::shared_ptr;
using std::unique_ptr;


SetMeshInstance::SetMeshInstance(){
    type = 2 ;
}
SetMeshInstance::SetMeshInstance(int mesh_id, glm::vec3 p, float r,const std::string& name, const glm::mat4& m, const Variant& bones){
    anchor_id = mesh_id;
    new_position = p ;
    new_radius = r ;
    new_mesh_name = name;
    new_pose = m ;
    new_bone_data = bones.clone();
    type = 2 ;
}

SetMeshInstance::~SetMeshInstance() {}

// Serialize this event's data, so it can be efficiently moved between timelines
std::map<std::string,Variant> SetMeshInstance::serialize() const{
    map<string,Variant> serial;
    serial["a"] = Variant(anchor_id);
    serial["t"] = Variant(time);
    serial["p"] = Variant(new_position);
    serial["r"] = Variant(new_radius);
    serial["name"] = Variant(new_mesh_name);
    serial["pose"] = Variant(new_pose);
    serial["bones"] = new_bone_data.clone();
    serial["type"] = Variant(type);
    return serial;

}

// Set this event to data generated by its serialize method
void SetMeshInstance::set(std::map<std::string,Variant>& serial){
    anchor_id = serial["a"].getInt();
    time = serial["t"].getDouble();
    new_position = serial["p"].getVec3();
    new_radius = serial["r"].getFloat();
    new_mesh_name = serial["name"].getString();
    new_pose = serial["pose"].getMat4();
    new_bone_data = serial["bones"].clone();
}

// Runs the event
// This is what you need to override to implement your application
// To maintain causality run should only interact with dynamic data by using the privided methods:
// get(id), getMutable(), addEvent, createObject, deleteObject, and getCollisions
void SetMeshInstance::run(){
    weak_ptr<TObject> ow = getMutable() ;
    if(auto og = ow.lock()){
        shared_ptr<MeshInstance> o = std::static_pointer_cast<MeshInstance>(og);
        o->position = new_position;
        o->radius = new_radius;
        o->mesh_name = new_mesh_name;
        o->pose = new_pose;
        o->bone_data = new_bone_data.clone();
    }
}